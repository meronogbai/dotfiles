extends typescript

snippet useEffectDebugger "use effect debugger"
	import { EffectCallback, useEffect, useRef } from 'react'

	const usePrevious = <T,>(value: T, initialValue: T) => {
		const ref = useRef(initialValue)
		useEffect(() => {
			ref.current = value
		})
		return ref.current
	}

	const useEffectDebugger = (
		effectHook: EffectCallback,
		dependencies: unknown[],
		dependencyNames: string[] = []
	) => {
		const previousDeps = usePrevious(dependencies, [])

		const changedDeps = dependencies.reduce(
			(
				accum: Record<string, { before: unknown after: unknown }>,
				dependency,
				index
			) => {
				if (dependency !== previousDeps[index]) {
					const keyName = dependencyNames[index] ?? index
					accum[keyName] = { before: previousDeps[index], after: dependency }
				}
				return accum
			},
			{}
		)

		if (Object.keys(changedDeps).length) {
			console.log('[use-effect-debugger]', changedDeps)
		}

		// eslint-disable-next-line react-hooks/exhaustive-deps
		useEffect(effectHook, dependencies)
	}

snippet page "next.js page"
  export default function ${1:Page}() {
    ${2}
  }

snippet comp "react component"
  export function ${1:Component}() {
    ${2}
  }
